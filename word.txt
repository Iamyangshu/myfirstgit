#完成git的安装后，还要写上自己的设置，所有的仓库均使用这个设置
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"
#创建仓库
mkdir mygit
cd mygit
pwd#显示当前目录

#初始化仓库(将可以这个目录初始化成为GIT可以管理的仓库)
git init

#千万不要使用Windows自带的记事本编辑任何文本文件
#将工作区文件readme.txt提交到暂存区
git add readme.txt

#将暂存区文件提交到仓库
git commit -m'填写简要的修改内容，以便于回溯'
#随时掌握仓库的状态
git status

#查看修改了那些内容
git diff

#历史修改记录(最近当前的记录)
git log

#记录每一次命令
git reflog
其中含有每次commit id根据这些id就可以进行回溯到历史版本
git reset -- hard commit id
# 当然也有简单的回退，HEAD^回退到上一版本
git reset -- hard HEAD^

#Git管理的是修改记录，而不是文件内容
在文件中修改后必须进行add才能被Git接管，add后再修改的内容，无法被直接提交，必须再次add
#如果出错并且已经提交到暂存区，也可以进行撤销
git reset HEAD file(文件名)#回退到最近文件

#删除，如果删除了工作区文件，也要相对应的删除仓库里的文件
git rm file(文件名)
#如果误删除也不用担心，因为仓库里面还有，
git checkout -- file

#由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的
$ ssh-keygen -t rsa -C "youremail@example.com"
从github上克隆本地库
git clone git@github.com:Iamyangshu/algorithms.git

管理分支
#创建分支
git checkout -b 分支名
然后就可以对文件进行正常修改提交，但却不会影响到master分支
确定修改完毕后，合并分支
git merge dev
然后就可以删除分支了
git branch -d dev
#注： git branch 可以列出所有分支
#切换分支
git checkout 分支名

*******************888
echo "# myfirstgit" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/Iamyangshu/myfirstgit.git
git push -u origin master


************88
git remote add origin https://github.com/Iamyangshu/myfirstgit.git
git push -u origin master

#之后的每次提交
git push origin master即可

